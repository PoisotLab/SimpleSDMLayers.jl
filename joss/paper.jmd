---
title: 'SimpleSDMLayers.jl and GBIF.jl: A Framework for Species 
Distribution Modelling in Julia'
tags:
  - Julia
  - ecology
  - biogeography
  - GBIF
  - species distribution modelling
authors:
  - name: Gabriel Dansereau^[Correspondance to gabriel.dansereau@umontreal.ca]
    orcid: 0000-0002-2212-3584
    affiliation: 1 # (Multiple affiliations must be quoted)
  - name: Timothée Poisot
    orcid: 0000-0002-0735-5184
    affiliation: 1
affiliations:
 - name: Département de sciences biologiques, Université de Montréal
   index: 1
date: 9 September 2020
bibliography: paper.bib

---

<div style="text-align: justify">

<!-- Text is hard wrapped at 80 characters and after each sentence -->

# Summary

Many analyses in Ecology and Biogeography require the use of geo-referenced 
data on species distribution, hence a tight integration between environmental 
data, species occurrence data, and spatial coordinates.
Species distribution models (SDMs), for instance, aim to predict where
environmental conditions are suitable for a given species on continuous
geographic scales. 
Thus, it requires an efficient way to access species occurrence and
environmental data, as well as a solid framework on which to build analyses
based on occurrence data. 
Here we present `SimpleSDMLayers.jl` and `GBIF.jl`, two packages in the _Julia_
language implementing a framework and type-system on which to build SDM 
analyses, as well as providing access to popular data sources for species 
occurrence and environmental conditions.

# Statement of need

Species distribution modelling (SDM) is an increasingly growing field in Ecology
and Biogeography, with many applications in biodiversity assessment, management,
and conservation (Araujo et al. 2019).
Most SDM models aim at predicting a species distribution in space based on
environmental data and information on where the species was previously seen.
Hence, SDM studies require a tight and efficient integration between
geo-referenced environmental and species occurrence data.
However, such data are complex to handle and often require specialized GIS
(geographic information systems) software, different from the programming
languages used on a common basis for data analyses.
There is a need for efficient tools to manipulate bioclimatic data in all
programming languages.

Here, we present `SimpleSDMLayers.jl`, a package to facilitate manipulation of
geo-referenced data in _Julia_, primarily for species distribution modelling.
The package implements an easy framework and type structures to manipulate the
data, and also provides access to some of the most common data sources for SDM
studies. 
This package is also tightly integrated with `GBIF.jl`, which allows easy access
to the GBIF database, a common data source in SDM studies.

# State of the field

The _R_ language has been the most widely used programming language in Ecology
in recent years and thus many efficient packages and tools have been developed
for species distribution modelling.
For instance, the package `raster` can be used to manipulate raster format data
(for example climatic or land use data), `dismo` implements many common SDM
models and provides access to common climatic data sources, and `rgbif` provides
access to the GBIF database, a common source of species occurrence data in SDM
studies.
Yet, few SDM resources currently exist for the _Julia_ language, a promising new
language especially efficient for numerical computing.
There are currently packages such as `GDAL.jl` and `ArchGDAL.jl` to manipulate
raster data; however these are lower level implementations than what is
typically used by most ecologists and lack the most common layer manipulation
features in SDM studies.
`SimpleSDMLayers.jl` is higher level implementation aimed at species
distribution modelling, building on `ArchGDAL.jl`, and including support for
common manipulation operations 
`SimpleSDMLayers.jl` also offers an built-in access to some of the most common data
sources in SDM studies, such as the WorldClim 2.1 climatic data (the most common
source of climate data in SDM studies, Booth et al. 2014) and the EarthEnv
land cover data.

# Example

As an example of a use-case, let's consider an example where someone wants to
perform a study in Europe and requires climatic data.
First, SimpleSDMLayers.jl allows to load WorldClim data in just one call, which
produces a layer for the whole world.
Then, a few of the common operations supported by SimpleSDMLayers.jl are 1)
clipping the layer to region of interest (Europe) in this case; 2) coarsening
the  resolution by averaging groups of cells for large scale analyses; and 3)
performing sliding window operations to aggregate values for each site based on
a certain radius.
A result of these operations can be found in figure 1.


```julia
## Preparation

# Load required packages
using SimpleSDMLayers
using GBIF
using Statistics
using Plots

# Get world temperature data
temperature_world = worldclim(1)

## Common manipulations

# Clip to Europe
temperature_europe = temperature_world[left=-11.2, right=30.6, bottom=29.2, top=71.0];
# Coarsen resolution
temperature_coarse = coarsen(temperature_europe, Statistics.mean, (4, 4))
# Sliding window averaging
temperature_slided = slidingwindow(temperature_europe, Statistics.mean, 100.0)

## Easily plot
p1 = plot(temperature_europe)
p2 = plot(temperature_coarse)
p3 = plot(temperature_slided)
p = plot(p1, p2, p3, layout = grid(1, 3, widths = [0.29, 0.29, 0.405]), 
         frame = :box, ticks = false, colorbar = [false false true])
```

For an even more concrete example, let's focus on the case of a single species,
the Belted Kingfisher in this case.
GBIF.jl first allows us to retrieve the latest occurrences from the GBIF
database.
Then, SimpleSDMLayers.jl integrates this data and can combine it with the
environmental layers, allowing to clip the layers to the extent of the
occurrences.
Finally, it is very straightforward to create a map of the occurrences that also
displays environmental data.

```julia

# Get Belted Kingfisher occurrences from GBIF
kingfisher = GBIF.taxon("Megaceryle alcyon", strict=true)
kf_occurrences = occurrences(kingfisher)
# Get at least 200 occurrences
while length(kf_occurrences) < 200
    occurrences!(kf_occurrences)
    @info "$(length(kf_occurrences)) occurrences"
end

# Clip layer to occurrences
temperature_clip = clip(temperature_world, kf_occurrences)

# Plot occurrences
contour(temperature_clip, fill=true, colorbar_title = "Average temperature (°C)",
                  xguide = "Longitude", yguide = "Latitude")
scatter!(longitudes(kf_occurrences), latitudes(kf_occurrences), 
         label = "Kingfisher occurrences", legend = :bottomleft, 
         c = :white, msc = :orange)

precipitation_clip = clip(worldclim(12), kf_occurrences)
histogram2d(temperature_clip, precipitation_clip, c = :viridis)
scatter!(temperature_clip[kf_occurrences], precipitation_clip[kf_occurrences], 
         label = :none, xlabel = "Temperature (°C)", ylabel = "Precipitation (mm)",
         colorbar_title = "Number of sites",
         c = :white, msc = :orange)

```

# Acknowledgements


# References