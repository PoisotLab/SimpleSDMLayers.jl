---
title: 'SimpleSDMLayers.jl and GBIF.jl: A Framework for Species 
Distribution Modelling in Julia'
tags:
  - Julia
  - ecology
  - biogeography
  - GBIF
  - species distribution modelling
authors:
  - name: Gabriel Dansereau^[Correspondance to gabriel.dansereau@umontreal.ca]
    orcid: 0000-0002-2212-3584
    affiliation: 1 # (Multiple affiliations must be quoted)
  - name: Timothée Poisot
    orcid: 0000-0002-0735-5184
    affiliation: 1
affiliations:
 - name: Département de sciences biologiques, Université de Montréal
   index: 1
date: 9 September 2020
bibliography: paper.bib

# Optional fields if submitting to a AAS journal too, see this blog post:
# https://blog.joss.theoj.org/2018/12/a-new-collaboration-with-aas-publishing
aas-doi:
aas-journal:
---

<div style="text-align: justify">

<!-- Text is hard wrapped at 80 characters and after each sentence -->

# Summary

Many analyses in Ecology and Biogeography require the use of geo-referenced 
data on species distribution, hence a tight integration between environmental 
data, species occurrence data, and spatial coordinates.
Species distribution models (SDMs), for instance, aim to predict where
environmental conditions are suitable for a given species on continuous
geographic scales. 
Thus, it requires an efficient way to access species occurrence and
environmental data, as well as a solid framework on which to build analyses
based on occurrence data. 
Here we present `GBIF.jl` and `SimpleSDMLayers.jl`, two packages in the Julia
language providing access to popular data sources for species occurrence and
environmental conditions, as well as a framework and type-system on which to
build SDM analyses.

# Statement of need

Species distribution modelling (SDM) is an increasingly growing field in Ecology
and Biogeography, with many applications in biodiversity assessment, management,
and conservation (Araujo et al. 2019).
Most SDM models aim at predicting a species distribution in space based on
environmental data and information on where the species was previously seen.
Hence, SDM studies require a tight and efficient integration between
geo-referenced environmental and species occurrence data.
However, such data are complex to handle and often require specialized GIS
(geographic information systems) software, different from the programming
languages used on a common basis for data analyses.
There is a need for efficient tools to manipulate bioclimatic data in all
programming languages.
Here, we present `SimpleSDMLayers.jl`, a package to facilitate manipulation of
geo-referenced data in _Julia_, primarily for species distribution modelling.
This package is also tightly integrated with `GBIF.jl`, which allows easy access
to the GBIF database, a common data source in SDM studies.

The _R_ language has been the most widely used programming language in Ecology
in recent years and thus many efficient packages and tools have been developed
for species distribution modelling.
For instance, the package `raster` can be used to manipulate raster format data
(for example climatic or land use data), `dismo` implements many common SDM
models and provides access to common climatic data sources, and `rgbif` provides
access to the GBIF database, a common source of species occurrence data in SDM
studies.
Yet, few SDM resources currently exist for the _Julia_ language, a promising new
language especially efficient for numerical computing.
There are currently packages such as `GDAL.jl` and `ArchGDAL.jl` to manipulate
raster data; however these are lower level implementations than what is
typically used by most ecologists and lack the most common layer manipulation
features in SDM studies, as well as an easy access to common data sources.
`SimpleSDMLayers.jl` is higher level implementation aimed at species
distribution modelling, building on `ArchGDAL.jl`, and including support for
common manipulation operations and built-in access to environmental data
sources.

- Need for occurrence data
  - Covered by `rgbif` in _R_
  - Popularity of GBIF
- Need for WorldClim & environmental data
  - Covered by `dismo` in _R_
  - (no built-in models though $\rightarrow$ should we add BioClim or not)
  - Popularity of WorldClim variables in the SDM field
- Need for easy-to-manipulate layer format for species distribution modelling
  - ~kinda covered by `layer` in _R_
  - Layer manipulation workflow
  - Simpler & more efficient than `GDAL` or `ArchGDAL` for ecologists
- SDMs also know as HSMs (habitat suitability models)
- GIS functionality --> easier access all in Julia, data preparation, data
  analysis/manipulation/modelling in one place, etc. (better productivity)
- Araujo et al. 2019 for the increase in SDM studies

# Citations

Citations to entries in paper.bib should be in
[rMarkdown](http://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html)
format.

If you want to cite a software repository URL (e.g. something on GitHub without a preferred
citation) then you can do it with the example BibTeX entry below for @fidgit.

For a quick reference, the following citation commands can be used:
- `@author:2001`  ->  "Author et al. (2001)"
- `[@author:2001]` -> "(Author et al., 2001)"
- `[@author1:2001; @author2:2001]` -> "(Author1 et al., 2001; Author2 et al., 2002)"

# Figures

Figures can be included like this:
![Caption for example figure.\label{fig:example}](figure.png)
and referenced from text using \autoref{fig:example}.

# Example

```julia
## Preparation

# Load required packages
using SimpleSDMLayers
using GBIF
using Statistics
using Plots

# Get world temperature data
temperature_world = worldclim(1)

## Common manipulations

# Clip to Europe
temperature_europe = temperature_world[left=-11.2, right=30.6, bottom=29.2, top=71.0];
# Coarsen resolution
temperature_coarse = coarsen(temperature_europe, Statistics.mean, (4, 4))
# Sliding window averaging
temperature_slided = slidingwindow(temperature_europe, Statistics.mean, 100.0)

## Easily plot
p1 = plot(temperature_europe)
p2 = plot(temperature_coarse)
p3 = plot(temperature_slided)
p = plot(p1, p2, p3, layout = grid(1, 3, widths = [0.29, 0.29, 0.405]), 
         frame = :box, ticks = false, colorbar = [false false true])
```

```julia

# Get Belted Kingfisher occurrences from GBIF
kingfisher = GBIF.taxon("Megaceryle alcyon", strict=true)
kf_occurrences = occurrences(kingfisher)
# Get at least 200 occurrences
while length(kf_occurrences) < 200
    occurrences!(kf_occurrences)
    @info "$(length(kf_occurrences)) occurrences"
end

# Clip layer to occurrences
temperature_clip = clip(temperature_world, kf_occurrences)

# Plot occurrences
contour(temperature_clip, fill=true, colorbar_title = "Average temperature (°C)",
                  xguide = "Longitude", yguide = "Latitude")
scatter!(longitudes(kf_occurrences), latitudes(kf_occurrences), 
         label = "Kingfisher occurrences", legend = :bottomleft, 
         c = :white, msc = :orange)

precipitation_clip = clip(worldclim(12), kf_occurrences)
histogram2d(temperature_clip, precipitation_clip, c = :viridis)
scatter!(temperature_clip[kf_occurrences], precipitation_clip[kf_occurrences], 
         label = :none, xlabel = "Temperature (°C)", ylabel = "Precipitation (mm)",
         colorbar_title = "Number of sites",
         c = :white, msc = :orange)

```

# Acknowledgements

We acknowledge contributions from ... during the genesis of this project.

# References