var documenterSearchIndex = {"docs":
[{"location":"examples/slidingwindow/#Sliding-window-analysis","page":"Sliding window analysis","title":"Sliding window analysis","text":"","category":"section"},{"location":"examples/slidingwindow/","page":"Sliding window analysis","title":"Sliding window analysis","text":"In this example, we will get precipitation data from Québec, and use a sliding window analysis to smooth them out. The beginning of the code should now be familiar:","category":"page"},{"location":"examples/slidingwindow/","page":"Sliding window analysis","title":"Sliding window analysis","text":"using SimpleSDMLayers\nusing Plots\nusing Statistics\n\nprecipitation = worldclim(12; left=-80.0, right=-56.0, bottom=44.0, top=62.0)","category":"page"},{"location":"examples/slidingwindow/","page":"Sliding window analysis","title":"Sliding window analysis","text":"The sliding window works by taking all pixels within a given radius (expressed in kilometres) around the pixel of interest, and then applying the function given as the second argument to their values. Empty pixels are removed. In this case, we will do a summary across a 100 km radius around each pixel:","category":"page"},{"location":"examples/slidingwindow/","page":"Sliding window analysis","title":"Sliding window analysis","text":"averaged = slidingwindow(precipitation, Statistics.mean, 100.0)","category":"page"},{"location":"examples/slidingwindow/","page":"Sliding window analysis","title":"Sliding window analysis","text":"We can finally overlap the two layers – the result of sliding window is a little bit smoother than the raw data.","category":"page"},{"location":"examples/slidingwindow/","page":"Sliding window analysis","title":"Sliding window analysis","text":"plot(precipitation, c=:alpine)\ncontour!(averaged, c=:white, lw=2.0)","category":"page"},{"location":"man/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"man/types/","page":"Types","title":"Types","text":"Layers are represented by a grid, storing the content of cells in a Matrix, and a bounding box indicated by the floating point coordinates of its limits.","category":"page"},{"location":"man/types/#Implemented-types","page":"Types","title":"Implemented types","text":"","category":"section"},{"location":"man/types/","page":"Types","title":"Types","text":"SimpleSDMResponse\nSimpleSDMPredictor","category":"page"},{"location":"man/types/#SimpleSDMLayers.SimpleSDMResponse","page":"Types","title":"SimpleSDMLayers.SimpleSDMResponse","text":"A response is a SimpleSDMLayer that is mutable, and is the usual type to store analysis outputs. You can transform a response into a predictor using convert.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#SimpleSDMLayers.SimpleSDMPredictor","page":"Types","title":"SimpleSDMLayers.SimpleSDMPredictor","text":"A predictor is a SimpleSDMLayer that is immutable, and so does not have methods for setindex!, etc. It is a safe way to store values that should not be modified by the analysis. Note that if you are in a bind, the values of the grid field are not immutable, but don't tell anyone we told you. The correct way of handling predictors you need to modify would be to use convert methods.\n\n\n\n\n\n","category":"type"},{"location":"man/types/#Abstract-type","page":"Types","title":"Abstract type","text":"","category":"section"},{"location":"man/types/","page":"Types","title":"Types","text":"SimpleSDMLayer","category":"page"},{"location":"man/types/#SimpleSDMLayers.SimpleSDMLayer","page":"Types","title":"SimpleSDMLayers.SimpleSDMLayer","text":"All types in the package are part of the abstract type SimpleSDMLayer. A SimpleSDMLayer has five core fields: grid is a matrix storing the cells, and left, right, bottom and top are floating point numbers specifying the bounding box.\n\nIt is assumed that the missing values will be represented as nothing, so internally the matrix will have type Union{T, Nothing}.\n\n\n\n\n\n","category":"type"},{"location":"man/operations/#Other-operations","page":"Other operations","title":"Other operations","text":"","category":"section"},{"location":"man/operations/","page":"Other operations","title":"Other operations","text":"coarsen\nslidingwindow\nlatitudes\nlongitudes\nclip\nmask\nrescale!\nrescale\nmosaic","category":"page"},{"location":"man/operations/#SimpleSDMLayers.coarsen","page":"Other operations","title":"SimpleSDMLayers.coarsen","text":"coarsen(L::LT, f::FT, d::Tuple{IT,IT}) where {LT <: SimpleSDMLayer, FT <: Function, IT <: Integer}\n\nThis function will aggregate a layer by merging cells. The function f passed as its second argument is expected to take an array as input, and return a single value of any type (but it is sort of a social contract here that this will be a number of some sort, and if it is not, that you really know what you're doing).\n\nThe size of the cells to aggregate is given by the tuple, so that (2,2) will make groups of two cells vertically and two cells horizontally, for a total of four cells. By default, the cells containing nothing will be ignored, so that f is only applied to non-nothing values.\n\nIn cases where the number of cells to aggregate is not matching with the size of the grid, and ArgumentError will be thrown. Note that there is no expectation that the two values in d will be the same.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.slidingwindow","page":"Other operations","title":"SimpleSDMLayers.slidingwindow","text":"slidingwindow(L::LT, f::FT, d::IT) where {LT <: SimpleSDMLayer, FT <: Function, IT <: Number}\n\nThis function will replace the value at any cell by applying the function f to the array of cells values that are within a distance d (in kilometers) from the focal cell. This is, for example, useful to use an average to smooth out the layers. The distance is estimated using the haversine distance, assuming that the radius of the Earth is 6371.0 km. This means that the size of the window will vary a little bit across latitudes, but this is far better than using a number of cells, which would have dramatic consequences near the poles.\n\nIt always returns a SimpleSDMResponse, and the cells containing nothing will also not contain a value in the output. This is different from the behavior of coarsen, which tends to expand the area of the layer in which we have data.\n\nThis function is currently relatively slow. Performance improvements will arrive at some point.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.latitudes","page":"Other operations","title":"SimpleSDMLayers.latitudes","text":"latitudes(layer::T) where {T <: SimpleSDMLayer}\n\nReturns an iterator with the latitudes of the SDM layer passed as its argument. This returns the latitude at the center of each cell in the grid.\n\n\n\n\n\nlatitudes(records::GBIFRecords)\n\nReturns the non-missing latitudes.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.longitudes","page":"Other operations","title":"SimpleSDMLayers.longitudes","text":"longitudes(layer::T) where {T <: SimpleSDMLayer}\n\nReturns an iterator with the longitudes of the SDM layer passed as its argument. This returns the longitudes at the center of each cell in the grid.\n\n\n\n\n\nlongitudes(records::GBIFRecords)\n\nReturns the non-missing longitudes.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.clip","page":"Other operations","title":"SimpleSDMLayers.clip","text":"clip(p::T, r::GBIF.GBIFRecords)\n\nReturns a clipped version (with a 10% margin) around all occurences in a GBIFRecords collection.\n\n\n\n\n\nclip(layer::T, df::DataFrames.DataFrame; latitude = :latitude, longitude = :longitude) where {T <: SimpleSDMLayer}\n\nReturns a clipped version (with a 10% margin) around all occurences in a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.mask","page":"Other operations","title":"SimpleSDMLayers.mask","text":"mask(l1::T1, l2::T2) where {T1 <: SimpleSDMLayer, T2 <: SimpleSDMLayer}\n\nReturns a copy of the second layer in which the positions for which the first layer is zero (of the appropriate type) or nothing are set to nothing. This is mostly useful in cases where you have a Bool layer.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.rescale!","page":"Other operations","title":"SimpleSDMLayers.rescale!","text":"rescale!(layer::TI, template::TJ) where {TI <: SimpleSDMLayer, TJ <: SimpleSDMLayer}\n\nChanges the values of the layer given as its first argument, so that it has the same range as the values of the layer given as its second argument. Modification is done in-place.\n\n\n\n\n\nrescale!(layer::TI, t::Tuple{T,T}) where {TI <: SimpleSDMLayer, T <: Number}\n\nChanges the values of the layer given as its first argument, so that it has the same range as the values given as a tuple of values. Modification is done in-place.\n\n\n\n\n\nrescale!(layer::T, p::Vector{Real}) where {T <: SimpleSDMLayer}\n\nRescale the values of a layer so that they match with the quantiles given in p. Internally, this uses the Statistics.quantile function.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.rescale","page":"Other operations","title":"SimpleSDMLayers.rescale","text":"rescale(layer::TI, template::TJ) where {TI <: SimpleSDMLayer, TJ <: SimpleSDMLayer}\n\nCopying version of rescale!.\n\n\n\n\n\nrescale(layer::TI, t::Tuple{T,T}) where {TI <: SimpleSDMLayer, T <: Number}\n\nCopying version of rescale!.\n\n\n\n\n\nrescale(layer::T, p::Vector{Real}) where {T <: SimpleSDMLayer}\n\nCopying version of rescale!.\n\n\n\n\n\n","category":"function"},{"location":"man/operations/#SimpleSDMLayers.mosaic","page":"Other operations","title":"SimpleSDMLayers.mosaic","text":"mosaic(f::TF, layers::Vector{T}) where {TF <: Function, T <: SimpleSDMLayer}\n\nJoins a series of possibly overlapping layers by applying the function f to the values that occupy the same cells. Note that the function f  should return a single value and accept an vector as input. Functions like Statistics.mean, etc, work well.\n\nUsing mosaic with maximum is equivalent to raster::merge from the R package raster.\n\n\n\n\n\n","category":"function"},{"location":"examples/consensus/#Landcover-consensus","page":"Landcover consensus","title":"Landcover consensus","text":"","category":"section"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"In this example, we will create a consensus map of landcover for Corsica based on the EarthEnv data, and measure the variation within each pixel using the variance. The first step is to load the packages we need, and create a bounding box:","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"using SimpleSDMLayers\nusing Plots\n\nbbox = (left=8.25, right=10.0, bottom=41.2, top=43.2)","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"We will then do two things. First, get the first layer of landcover (see the help of landcover for a list of the layers), and then create a datacube, organized around dimensions of latitude, longitude, and layer value - we will only focus on the 11 first variables, since we do not want the information on open water (layer 12):","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"lc = landcover(1; full=false, bbox...)\nuse = fill(NaN32, size(lc)..., 11)","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"At this point, we will simply fill in the first \"slice\" of our datacube with values from the layer:","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"for (i,e) in enumerate(lc.grid)\n    coord = (CartesianIndices(size(lc.grid))[i].I..., 1)\n    if !isnothing(e)\n        use[coord...] = e\n    end\nend","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"The next step is to repeat this process for all other layers, filling the appropriate data cube slice:","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"for layer in 2:11\n    lc = landcover(layer; full=false, bbox...)\n    for (i,e) in enumerate(lc.grid)\n        coord = (CartesianIndices(size(lc.grid))[i].I..., layer)\n        if !isnothing(e)\n            use[coord...] = e\n        end\n    end\nend","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"To perform the actual analysis, we will define a get_most_common_landuse function, which will return the index of the layer with the highest score:","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"function get_most_common_landuse(f)\n    f[isnan.(f)] .= 0.0\n    sum(f) == 0 && return NaN\n    return last(findmax(f))\nend\n\nfunction shannon(x)\n    v = filter(!isnan, x)\n    length(v) == 0 && return NaN\n    v = v ./ sum(v)\n    return -sum(v.*log2.(v))\nend","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"consensus = mapslices(get_most_common_landuse, use; dims=3)[:,:,1]\nentropy = mapslices(shannon, use; dims=3)[:,:,1]\n\nconsensus = SimpleSDMResponse(consensus, lc)\nentropy = SimpleSDMResponse(entropy, lc)","category":"page"},{"location":"examples/consensus/","page":"Landcover consensus","title":"Landcover consensus","text":"p1 = plot(consensus, c=:Paired_11, frame=:grid)\np2 = plot(entropy, c=:Greys, frame=:grid)\n\nplot(p1, p2, size=(900, 400))","category":"page"},{"location":"examples/gbif/#Working-with-GBIF-data","page":"GBIF integration","title":"Working with GBIF data","text":"","category":"section"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"In this example, we will see how we can make the packages SimpleSDMLayers and the GBIF.jl package interact. We will specifically plot the relationship between temperature and precipitation for a few occurrences of the kingfisher Megaceryle alcyon.","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"using SimpleSDMLayers\nusing GBIF\nusing Plots\nusing StatsPlots\ntemperature = worldclim(1)\nprecipitation = worldclim(12)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"We can get some occurrences for the taxon of interest:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"kingfisher = GBIF.taxon(\"Megaceryle alcyon\", strict=true)\nkf_occurrences = occurrences(kingfisher, \"hasCoordinate\" => \"true\")\n\n# We will get some more occurrences\nfor i in 1:9\n  occurrences!(kf_occurrences)\nend\n\n@info kf_occurrences","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"We can then extract the temperature for the first occurrence:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"temperature[kf_occurrences[1]]","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"Of course, it would be unwieldy to do this for every occurrence in our dataset, and so we will see a way do it much faster. But first, we do not need the entire surface of the planet to perform our analysis, and so we will instead clip the layers:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"temperature_clip = clip(temperature, kf_occurrences)\nprecipitation_clip = clip(precipitation, kf_occurrences)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"This will make the future queries a little faster. By default, the clip function will ad a 5% margin on every side. To get the values of a layer at every occurrence in a GBIFRecord, we simply pass the records as a position:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"histogram2d(temperature_clip, precipitation_clip, c=:viridis)\nscatter!(temperature_clip[kf_occurrences], precipitation_clip[kf_occurrences], lab=\"\", c=:white, msc=:orange)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"This will return a record of all data for all geo-localized occurrences (i.e. neither the latitude nor the longitude is missing) in a GBIFRecords collection, as an array of the eltype of the layer. Note that the layer values can be nothing, in which case you might need to run filter(!isnothing, temperature_clip[kf_occurrences] for it to work with  the plotting functions.","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"We can also plot the records over space, using the overloads of the latitudes and longitudes functions:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"contour(precipitation_clip, c=:YlGnBu, title=\"Precipitation\", frame=:box, fill=true)\nscatter!(longitudes(kf_occurrences), latitudes(kf_occurrences), lab=\"\", c=:white, msc=:orange)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"These extensions of SimpleSDMLayers functions to work with the GBIF package are meant to greatly simplify the expression of more complex pipelines, notably for actual species distribution modeling.","category":"page"},{"location":"examples/gbif/#DataFrames-support","page":"GBIF integration","title":"DataFrames support","text":"","category":"section"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"Note that both SimpleSDMLayers.jl and GBIF.jl offer an (optional) integration with the DataFrames.jl package. Hence, the example above could also be approached with a DataFrame-centered workflow.","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"For example, after getting occurrences through GBIF.jl, we can convert them to a DataFrame:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"using DataFrames\nkf_df = DataFrame(kf_occurrences);\nlast(kf_df, 5)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"We can then extract the temperature values for all the occurrences:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"temperature[kf_df]","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"Or we can clip the layers according to the occurrences:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"clip(temperature, kf_df)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"We can also export all the values from a layer to a DataFrame with their corresponding coordinates: ","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"temperature_df = DataFrame(temperature_clip);\nlast(temperature_df, 5)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"Or do so with multiple layers at the same time:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"climate_clip = [temperature_clip, precipitation_clip]\nclimate_df = DataFrame(climate_clip);\nrename!(climate_df, :x1 => :temperature, :x2 => :precipitation);\nlast(climate_df, 5)","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"We can finally plot the values in a similar way:","category":"page"},{"location":"examples/gbif/","page":"GBIF integration","title":"GBIF integration","text":"filter!(x -> !isnothing(x.temperature) && !isnothing(x.precipitation), climate_df);\nhistogram2d(climate_df.temperature, climate_df.precipitation, c=:viridis)\nscatter!(temperature_clip[kf_df], precipitation_clip[kf_df], lab=\"\", c=:white, msc=:orange)","category":"page"},{"location":"man/data/#Datasets","page":"Data","title":"Datasets","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"The package offers access to bioclimatic and other datasets - they are downloaded, saved to the disk, and then read locally. Please note that some of them require a lot of memory, so make sure your machine can handle them.","category":"page"},{"location":"man/data/#Worldclim-2.1","page":"Data","title":"Worldclim 2.1","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"worldclim","category":"page"},{"location":"man/data/#SimpleSDMLayers.worldclim","page":"Data","title":"SimpleSDMLayers.worldclim","text":"worldclim(layer::Integer; resolution::Float64=10.0, left=nothing, right=nothing, bottom=nothing, top=nothing)\n\nDownload and prepare a WorldClim 2.1 bioclimatic variable, and returns it as an SimpleSDMPredictor. Layers are called by their number, from 1 to 19. The list of available layers is given in a table below.\n\nThe keywords are resolution, which must be a floating point value, and either 2.5, 5.0, or 10.0, as well as optionally left, right, bottom, and top, which will allow to only load parts of the data.\n\nInternally, this function will download the main zip file for the required resolution from the WordlClim website, extract it, and parse the required layers.\n\nIt is recommended to keep the content of the path folder, as it will eliminate the need to download and/or extract the tiff files. For example, calling wordlclim(1:19) will download and extract everything, and future calls will be much faster.\n\nVariable Description\n1 Annual Mean Temperature\n2 Mean Diurnal Range (Mean of monthly (max temp - min temp))\n3 Isothermality (BIO2/BIO7) (* 100)\n4 Temperature Seasonality (standard deviation *100)\n5 Max Temperature of Warmest Month\n6 Min Temperature of Coldest Month\n7 Temperature Annual Range (BIO5-BIO6)\n8 Mean Temperature of Wettest Quarter\n9 Mean Temperature of Driest Quarter\n10 Mean Temperature of Warmest Quarter\n11 Mean Temperature of Coldest Quarter\n12 Annual Precipitation\n13 Precipitation of Wettest Month\n14 Precipitation of Driest Month\n15 Precipitation Seasonality (Coefficient of Variation)\n16 Precipitation of Wettest Quarter\n17 Precipitation of Driest Quarter\n18 Precipitation of Warmest Quarter\n19 Precipitation of Coldest Quarter\n\nOriginal data: https://www.worldclim.org/data/worldclim21.html\n\n\n\n\n\n","category":"function"},{"location":"man/data/#CHELSA-V1","page":"Data","title":"CHELSA V1","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"bioclim","category":"page"},{"location":"man/data/#SimpleSDMLayers.bioclim","page":"Data","title":"SimpleSDMLayers.bioclim","text":"bioclim(layer::Integer; left=nothing, right=nothing, bottom=nothing, top=nothing)\n\nDownload and prepare bioclim layers from the CHELSA database, and returns them as an array of SimpleSDMPredictors. Layers are called by their number, from 1 to 19. The list of available layers is given in a table below.\n\nThe keyword argument is path, which refers to the path where the function will look for the geotiff files.\n\nNote that these files are large due the fine resolution of the data, and for this reason this function will return the integer version of the layers. Also note that the bioclim data are only available for the V1 of CHELSA, and are not from the V2.\n\nIt is recommended to keep the content of the path folder, as it will eliminate the need to download the tiff files (which are quite large). For example, calling bioclim(1:19) will download and everything, and future calls will be much faster.\n\nVariable Description\n1 Annual Mean Temperature\n2 Mean Diurnal Range (Mean of monthly (max temp - min temp))\n3 Isothermality (BIO2/BIO7) (* 100)\n4 Temperature Seasonality (standard deviation *100)\n5 Max Temperature of Warmest Month\n6 Min Temperature of Coldest Month\n7 Temperature Annual Range (BIO5-BIO6)\n8 Mean Temperature of Wettest Quarter\n9 Mean Temperature of Driest Quarter\n10 Mean Temperature of Warmest Quarter\n11 Mean Temperature of Coldest Quarter\n12 Annual Precipitation\n13 Precipitation of Wettest Month\n14 Precipitation of Driest Month\n15 Precipitation Seasonality (Coefficient of Variation)\n16 Precipitation of Wettest Quarter\n17 Precipitation of Driest Quarter\n18 Precipitation of Warmest Quarter\n19 Precipitation of Coldest Quarter\n\n\n\n\n\n","category":"function"},{"location":"man/data/#EarthEnv-landcover","page":"Data","title":"EarthEnv landcover","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"landcover","category":"page"},{"location":"man/data/#SimpleSDMLayers.landcover","page":"Data","title":"SimpleSDMLayers.landcover","text":"landcover(layers::Vector{T}; full::Bool=false, path::AbstractString=\"assets\") where {T <: Integer}\n\nDownload and prepare the EarthEnv consensus landcover data, and returns them as an array of SimpleSDMPredictors. Layers are called by their number, from 1 to\n\nThe list of available layers is given in a table below. The raw data come\n\nfrom https://www.earthenv.org/landcover.\n\nTHe full keyword indicates whether the DISCover information must be included. Quoting from the reference website:\n\nAlthough DISCover is based on older remote sensing imagery (1992-1993), it contains some complementary information which is useful for capturing sub-pixel land cover heterogeneity (please see the associated article for details). Therefore, it is recommended to use the full version of the consensus land cover dataset for most applications. However, the reduced version may provide an alternative for applications in regions with large land cover change in the past two decades.\n\nIt is recommended to keep the content of the path folder, as it will eliminate the need to download and/or extract the tiff files. For example, calling landcover(1:12) will download and extract everything, and future calls will be much faster. Please keep in mind that the layers can be quite large, so keeping the models stored is particularly important.\n\nVariable Description\n1 Evergreen/Deciduous Needleleaf Trees\n2 Evergreen Broadleaf Trees\n3 Deciduous Broadleaf Trees\n4 Mixed/Other Trees\n5 Shrubs\n6 Herbaceous Vegetation\n7 Cultivated and Managed Vegetation\n8 Regularly Flooded Vegetation\n9 Urban/Built-up\n10 Snow/Ice\n11 Barren\n12 Open Water\n\nThese data are released under a CC-BY-NC license to Tuanmu & Jetz.\n\n\n\n\n\n","category":"function"},{"location":"man/data/#ASCII-files","page":"Data","title":"ASCII files","text":"","category":"section"},{"location":"man/data/","page":"Data","title":"Data","text":"SimpleSDMLayers.ascii","category":"page"},{"location":"man/data/#SimpleSDMLayers.ascii","page":"Data","title":"SimpleSDMLayers.ascii","text":"ascii(file::AbstractString, datatype::Type{T}=Float64) where {T <: Number}\n\nReads the content of a grid file to a SimpleSDMPredictor, the type of which is given by the datatype argument.\n\n\n\n\n\nascii(layer::SimpleSDMPredictor{T}, file::AbstractString; nodata::T=convert(T, -9999)) where {T <: Number}\n\nWrites a layer to a grid file, with a given nodata value. The layer must store numbers.\n\n\n\n\n\nascii(layer::SimpleSDMResponse{T}, file::AbstractString; nodata::T=convert(T, -9999)) where {T <: Number}\n\nWrites a layer to a grid file, with a given nodata value. The layer must store numbers.\n\n\n\n\n\n","category":"function"},{"location":"man/plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"man/plotting/","page":"Plotting","title":"Plotting","text":"Plotting currently supports (through Plots and StatsPlots) heatmap and contour (for the values of a single layer), density and histogram (for the non-NaN values), as well as scatter and histogram2d for two layers. All usual options for plots apply. There are numerous illustrations of the plotting functions in the examples.","category":"page"},{"location":"examples/temperature/#Getting-temperature-data","page":"Temperature data","title":"Getting temperature data","text":"","category":"section"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"In this example, we will look at temperature data from the worldclim 2 data, crop it for Western Europe, and then change the resolution to aggregate the data. The first step is to get the worldclim layer for temperature (the codes for each layers are in the function documentation):","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"using SimpleSDMLayers\ntemperature = worldclim(1)","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"Thanks to the integration with Plots and StatsPlots, we can very rapidly visualize these data:","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"using Plots, StatsPlots\nheatmap(temperature, c=:cividis, frame=:box)\nxaxis!(\"Longitude\")\nyaxis!(\"Latitude\")","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"Let's also have a look at the density while we're at it:","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"density(temperature, frame=:zerolines, c=:grey, fill=(0, :grey, 0.5), leg=false)\nxaxis!(\"Temperature\", (-50,30))","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"The next step is to clip the data to the region of interest. This requires a the coordinates of the bounding box as two tuples (for longitude and latitude) – we can also make a quick heatmap to see what the region looks like:","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"temperature_europe = temperature[left=-11.0, right=31.1, bottom=29.0, top=71.1]\nheatmap(temperature_europe, c=:cividis, aspectratio=1, frame=:box)","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"The next step will be to coarsen these data, which requires to give the number of cells to merge alongside each dimension. This number of cells must be a divider of the grid size, which we can view with:","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"size(temperature_europe)","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"In an ideal world, we could want to find a number of cells that is the same both for latitude and longitude, and one approach is to finagle our way into a correct grid by changing the clipping region.","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"In this case, we will use a coarsening scale of (2,2), which gives us a total of 4 cells in the aggregated result. Our aggregation function will be mean (so we report the average temperature across these cells):","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"import Statistics\ntemperature_europe_coarse = coarsen(temperature_europe, Statistics.mean, (2, 2))","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"One again, we can plot these data:","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"heatmap(temperature_europe_coarse, aspectratio=1, c=:cividis, frame=:box)","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"Finally, we can compare our different clipping and approximations to the overall dataset:","category":"page"},{"location":"examples/temperature/","page":"Temperature data","title":"Temperature data","text":"density(temperature, frame=:zerolines, c=:grey, fill=(0, :grey, 0.5), lab=\"\")\ndensity!(temperature_europe, c=:black, lab=\"Raw data\")\ndensity!(temperature_europe_coarse, c=:darkgrey, lab=\"Average\")\nxaxis!(\"Temperature\", (-50,30))","category":"page"},{"location":"examples/import/#Importing-your-own-data","page":"Importing raster data","title":"Importing your own data","text":"","category":"section"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"It is possible to import your own rasters into a SimpleSDMLayer object. This requires defining a new type and two \"helper\" functions, which might seem a little bit convoluted, but helps immensely underneath in case you want to also download rasters from the web with different arguments. In this example, we will look at a data file produced by the OmniScape package, and which represents landscape connectivity in the Laurentians region of Québec. This example will also show how we can use the broadcast operation to modify the values of a raster.","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"using SimpleSDMLayers\nusing Plots\nusing StatsBase","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"The file comes with the package itself, so we can read it directly - this is a geotiff file, where values are floating point numbers representing connectivity.","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"file = joinpath(dirname(pathof(SimpleSDMLayers)), \"..\", \"data\", \"connectivity.tiff\")","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"To import this file as a SimpleSDMLayer, we need to create a type (MyConnectivityMap), and declare a method for latitudes and longitudes for this type, where the output is the range of latitudes and longitudes. This might seem cumbersome, but remember: it can be automated, and if you do not declare a latitude and longitude method, it will be assumed that the raster covers the entire globe. From a end-user perspective, it also removes the need to pass the bounding box of your layer as an argument, and to focus instead of the region of interest.","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"struct MyConnectivityMap <: SimpleSDMLayers.SimpleSDMSource end\nSimpleSDMLayers.latitudes(::Type{MyConnectivityMap}) = (45.34523, 47.38457)\nSimpleSDMLayers.longitudes(::Type{MyConnectivityMap}) = (-75.17734,-72.36486)","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"Now that this is done, we can read this file as a SimpleSDMResponse using the raster function:","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"mp = SimpleSDMLayers.raster(SimpleSDMResponse, MyConnectivityMap(), file)","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"Because this file has raw values, which are not necessarily great for plotting, we will transform it to quantiles, using the StatsBase.ecdf function.","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"qfunc = ecdf(convert(Vector{Float64}, filter(!isnothing, mp.grid)))","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"And we can now broadcast this function to the layer:","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"qmap = broadcast(qfunc, mp)","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"Finally, we are ready for plotting:","category":"page"},{"location":"examples/import/","page":"Importing raster data","title":"Importing raster data","text":"plot(qmap, frame=:grid, c=:YlGnBu)","category":"page"},{"location":"#Simple-SDM-Layers-in-*Julia*","page":"Home","title":"Simple SDM Layers in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The SimpleSDMLayers provides an interface to facilitate the manipulation of raster data for species distributions modeling in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The two core types of the package are SimpleSDMPredictor and SimpleSDMResponse. The only difference between the two is that predictors are immutable, but responses are. All types belong to the abstract SimpleSDMLayer, and are organised in the same way: a grid field storing a matrix of data (of any type!), and the left, right, bottom, and top coordinates (as floating point values).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Of course these details are largely irrelevant, since we have overloaded a large number of methods from Base, to make indexing, converting, and modifying data as easy as possible.","category":"page"},{"location":"examples/landcover/#Getting-landcover-data","page":"Landcover data","title":"Getting landcover data","text":"","category":"section"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"In this example, we will look at landcover data, specifically the proportion of urban/built area in Europe; the entire dataset is very large to fit in memory, as it has a resolution of about 1 kilometre squared. Therefore, we will take advantage of the ability to only load the part that matters by passing the limits of a bounding box.","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"using SimpleSDMLayers\nurban = landcover(9; left=-11.0, right=31.1, bottom=29.0, top=71.1)","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"This dataset is returning data as UInt8 (as it represents a proportion of the pixel occupied by the type), but this is not something that can be plotted efficiently. So in the next step, we will manipulate this object a little bit to have something more workable.","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"Let's start by preparing a new grid, with the same dimensions, but a friendlier type, and then we can then fill these values using a simple rule of using either NaN or the converted value:","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"n_urban_grid = zeros(Float32, size(urban));\nfor (i,e) in enumerate(urban.grid)\n  n_urban_grid[i] = isnothing(e) ? NaN : Float32(e)\nend","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"We can now overwrite our urban object as a layer:","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"urban = SimpleSDMPredictor(n_urban_grid, urban)","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"Note that the previous instruction uses a shortcut where the bounding box from a new SimpleSDMLayer is drawn from the bounding box for an existing layer. With this done, we can show the results:","category":"page"},{"location":"examples/landcover/","page":"Landcover data","title":"Landcover data","text":"using Plots\nheatmap(urban, c=:terrain)","category":"page"},{"location":"man/overloads/#Methods-overloaded","page":"Overloads","title":"Methods overloaded","text":"","category":"section"},{"location":"man/overloads/","page":"Overloads","title":"Overloads","text":"To facilitate writing julian code, we have overloaded a number of methods from Base. These methods should remove the need to interact with the grid field directly, and also allow to set and get values using the geographic coordinates (as opposed to the grid positions).","category":"page"},{"location":"man/overloads/#From-Base","page":"Overloads","title":"From Base","text":"","category":"section"},{"location":"man/overloads/","page":"Overloads","title":"Overloads","text":"convert\ncopy\ncollect\neltype\nsize\nstride\neachindex\ngetindex\nsetindex!\nsimilar\nBase.sum\nBase.maximum\nBase.minimum\nBase.extrema\nBase.max\nBase.min\n+\n-\n*\n/","category":"page"},{"location":"man/overloads/#Base.convert","page":"Overloads","title":"Base.convert","text":"Base.convert(::Type{SimpleSDMResponse}, layer::T) where {T <: SimpleSDMPredictor}\n\nReturns a response with the same grid and bounding box as the predictor.\n\n\n\n\n\nBase.convert(::Type{SimpleSDMPredictor}, layer::T) where {T <: SimpleSDMResponse}\n\nReturns a predictor with the same grid and bounding box as the response.\n\n\n\n\n\nBase.convert(::Type{Matrix}, layer::T) where {T <: SimpleSDMLayer}\n\nReturns the grid as an array.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.copy","page":"Overloads","title":"Base.copy","text":"Base.copy(l::T) where {T <: SimpleSDMLayer}\n\nReturns a new copy of the layer, which has the same type.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.collect","page":"Overloads","title":"Base.collect","text":"Base.collect(l::T) where {T <: SimpleSDMLayer}\n\nReturns the non-nothing values of a layer.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.eltype","page":"Overloads","title":"Base.eltype","text":"Base.eltype(layer::SimpleSDMLayer{T}) where {T}\n\nReturns the type of the values stored in the grid, where the Nothing type is omitted.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.size","page":"Overloads","title":"Base.size","text":"Base.size(layer::T) where {T <: SimpleSDMLayer}\n\nReturns the size of the grid.\n\n\n\n\n\nBase.size(layer::T, i...) where {T <: SimpleSDMLayer}\n\nReturns the size of the grid alongside a dimension.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.stride","page":"Overloads","title":"Base.stride","text":"Base.stride(layer::T; dims::Union{Nothing,Integer}=nothing) where {T <: SimpleSDMLayer}\n\nReturns the stride, i.e. half the length, of cell dimensions, possibly alongside a side of the grid. The first position is the length of the longitude cells, the second the latitude.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.eachindex","page":"Overloads","title":"Base.eachindex","text":"Base.eachindex(layer::T) where {T <: SimpleSDMLayer}\n\nReturns the index of the grid.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.getindex","page":"Overloads","title":"Base.getindex","text":"Extracts a  value from a layer by its grid position.\n\n\n\n\n\nBase.getindex(layer::T, i::R, j::R) where {T <: SimpleSDMLayer, R <: UnitRange}\n\nExtracts a series of positions in a layer, and returns a layer corresponding to the result. This is essentially a way to rapidly crop a layer to a given subset of its extent. The i and j arguments are UnitRanges (of Integer).\n\nThe layer returned by this function will have the same type as the layer passed as its argument, but this can be changed using convert. Note that this function performs additional checks to ensure that the range is not empty, and to also ensure that it does not overflows from the size of the layer.\n\n\n\n\n\nBase.getindex(layer::T, longitude::K, latitude::K) where {T <: SimpleSDMLayer, K <: AbstractFloat}\n\nExtracts the value of a layer at a given latitude and longitude. If values outside the range are requested, will return nothing.\n\n\n\n\n\nBase.getindex(layer::T; left=nothing, right=nothing, top=nothing, bottom=nothing) where {T <: SimpleSDMLayer, K <: Union{Nothing,AbstractFloat}}\n\nReturns a subset of the argument layer, where the new limits are given by left, right, top, and bottom. Up to three of these can be omitted, and if so these limits will not be affected.\n\n\n\n\n\nBase.getindex(layer::T, n::NT) where {T <: SimpleSDMLayer, NT <: NamedTuple}\n\nReturns a subset of the argument layer, where the new limits are given in a NamedTuple by left, right, top, and bottom, in any order. Up to three of these can be omitted, and if so these limits will not be affected.\n\n\n\n\n\nBase.getindex(layer1::T1, layer2::T2) where {T1 <: SimpleSDMLayer, T2 <: SimpleSDMLayer}\n\nExtract a layer based on a second layer. Note that the two layers must be compatible, which is to say they must have the same bounding box and grid size.\n\n\n\n\n\nBase.getindex(p::T, occurrence::GBIF.GBIFRecord) where {T <: SimpleSDMLayer}\n\nExtracts the value of a layer at a given position for a GBIFRecord. If the GBIFRecord has no latitude or longitude, this will return nothing.\n\n\n\n\n\nBase.getindex(p::T, r::GBIF.GBIFRecords) where {T <: SimpleSDMLayer}\n\nReturns the values of a layer at all occurrences in a GBIFRecords collection.\n\n\n\n\n\nBase.getindex(layer::T, df::DataFrames.DataFrame; latitude = :latitude, longitude = :longitude) where {T <: SimpleSDMLayer}\n\nReturns the values of a layer at all occurrences in a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.setindex!","page":"Overloads","title":"Base.setindex!","text":" Base.setindex!(layer::SimpleSDMResponse{T}, v::T, i...) where {T}\n\nChanges the value of a cell, or a range of cells, as indicated by their grid positions.\n\n\n\n\n\nBase.setindex!(layer::T, v, lon::Float64, lat::Float64) where {T <: SimpleSDMResponse}\n\nChanges the values of the cell including the point at the requested latitude and longitude.\n\n\n\n\n\nBase.setindex!(p::T, v, occurrence::GBIFRecord) where {T <: SimpleSDMResponse}\n\nChanges the values of the cell including the point at the requested latitude and longitude.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.similar","page":"Overloads","title":"Base.similar","text":"Base.similar(l::T) where {T <: SimpleSDMLayer}\n\nReturns a SimpleSDMResponse of the same dimensions as the original layer, with nothing in the same positions. The rest of the values are replaced by the output of zero(eltype(layer.grid)), which implies that there must be a way to get a zero for the type. If not, the same result can always be achieved through the use of copy, manual update, and convert.\n\n\n\n\n\nBase.similar(::Type{TC}, l::T) where {TC <: Any, T <: SimpleSDMLayer}\n\nReturns a SimpleSDMResponse of the same dimensions as the original layer, with nothing in the same positions. The rest of the values are replaced by the output of zero(TC), which implies that there must be a way to get a zero for the type. If not, the same result can always be achieved through the use of copy, manual update, and convert.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.sum","page":"Overloads","title":"Base.sum","text":"Base.sum(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies sum (from Base) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nBase.sum(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies sum (from Base) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.maximum","page":"Overloads","title":"Base.maximum","text":"Base.maximum(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies maximum (from Base) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nBase.maximum(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies maximum (from Base) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.minimum","page":"Overloads","title":"Base.minimum","text":"Base.minimum(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies minimum (from Base) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nBase.minimum(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies minimum (from Base) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.extrema","page":"Overloads","title":"Base.extrema","text":"Base.extrema(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies extrema (from Base) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nBase.extrema(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies extrema (from Base) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.max","page":"Overloads","title":"Base.max","text":"Base.max(l1::SimpleSDMLayer, l2::SimpleSDMLayer)\n\nApplies max (from Base) to every pair of cells from two SimpleSDMLayers and returns the result as a new SimpleSDMResponse layer. Note that max is only applied to the pairs without a nothing element, and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.min","page":"Overloads","title":"Base.min","text":"Base.min(l1::SimpleSDMLayer, l2::SimpleSDMLayer)\n\nApplies min (from Base) to every pair of cells from two SimpleSDMLayers and returns the result as a new SimpleSDMResponse layer. Note that min is only applied to the pairs without a nothing element, and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.:+","page":"Overloads","title":"Base.:+","text":"Base.+(l1::SimpleSDMLayer, l2::SimpleSDMLayer)\n\nApplies + (from Base) to every pair of cells from two SimpleSDMLayers and returns the result as a new SimpleSDMResponse layer. Note that + is only applied to the pairs without a nothing element, and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.:-","page":"Overloads","title":"Base.:-","text":"Base.-(l1::SimpleSDMLayer, l2::SimpleSDMLayer)\n\nApplies - (from Base) to every pair of cells from two SimpleSDMLayers and returns the result as a new SimpleSDMResponse layer. Note that - is only applied to the pairs without a nothing element, and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.:*","page":"Overloads","title":"Base.:*","text":"Base.*(l1::SimpleSDMLayer, l2::SimpleSDMLayer)\n\nApplies * (from Base) to every pair of cells from two SimpleSDMLayers and returns the result as a new SimpleSDMResponse layer. Note that * is only applied to the pairs without a nothing element, and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Base.:/","page":"Overloads","title":"Base.:/","text":"Base./(l1::SimpleSDMLayer, l2::SimpleSDMLayer)\n\nApplies / (from Base) to every pair of cells from two SimpleSDMLayers and returns the result as a new SimpleSDMResponse layer. Note that / is only applied to the pairs without a nothing element, and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#From-Broadcast","page":"Overloads","title":"From Broadcast","text":"","category":"section"},{"location":"man/overloads/","page":"Overloads","title":"Overloads","text":"broadcast","category":"page"},{"location":"man/overloads/#Base.Broadcast.broadcast","page":"Overloads","title":"Base.Broadcast.broadcast","text":"Broadcast.broadcast(f, L::LT) where {LT <: SimpleSDMLayer}\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#From-Statistics","page":"Overloads","title":"From Statistics","text":"","category":"section"},{"location":"man/overloads/","page":"Overloads","title":"Overloads","text":"Statistics.mean\nStatistics.median\nStatistics.std\nStatistics.quantile","category":"page"},{"location":"man/overloads/#Statistics.mean","page":"Overloads","title":"Statistics.mean","text":"Statistics.mean(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies mean (from Statistics) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nStatistics.mean(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies mean (from Statistics) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nStatistics.mean(layers::Array{T}) where {T <: SimpleSDMLayer}\n\nApplies mean (from Statistics) to the elements in corresponding positions from the different layers (similar to mean(a::Array{Matrix})) and returns the result as a new SimpleSDMResponse layer. Note that mean is only applied to the positions  without a nothing element and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Statistics.median","page":"Overloads","title":"Statistics.median","text":"Statistics.median(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies median (from Statistics) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nStatistics.median(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies median (from Statistics) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Statistics.std","page":"Overloads","title":"Statistics.std","text":"Statistics.std(l::SimpleSDMResponse{T}) where {T <: Number}\n\nApplies std (from Statistics) to an object of type SimpleSDMResponse. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nStatistics.std(l::SimpleSDMPredictor{T}) where {T <: Number}\n\nApplies std (from Statistics) to an object of type SimpleSDMPredictor. This function has been automatically generated. Note that this function is only applied to the non-nothing elements of the layer, and has no method to work on the dims keyword; the grid itself can be extracted with convert(Matrix, l).\n\n\n\n\n\nStatistics.std(layers::Array{T}) where {T <: SimpleSDMLayer}\n\nApplies std (from Statistics) to the elements in corresponding positions from the different layers (similar to mean(a::Array{Matrix})) and returns the result as a new SimpleSDMResponse layer. Note that std is only applied to the positions  without a nothing element and returns nothing for the pairs with one. This function has been automatically generated.\n\n\n\n\n\n","category":"function"},{"location":"man/overloads/#Statistics.quantile","page":"Overloads","title":"Statistics.quantile","text":"quantile(layer::T, p) where {T <: SimpleSDMLayer}\n\nReturns the quantiles of layer at p, using Statistics.quantile.\n\n\n\n\n\n","category":"function"}]
}
